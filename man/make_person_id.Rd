% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_person_id.R
\name{make_person_id}
\alias{make_person_id}
\alias{update_person_id}
\title{Simple function for assigning person IDs}
\usage{
make_person_id(key1, key2)

update_person_id(personId, key1, key2)
}
\arguments{
\item{key1}{Variable used to identify unique individuals,
e.g. passport number, or passport number combined with name.}

\item{key2}{Variable used to identify unique individuals,
e.g. date of birth, or date of birth combined with name.}

\item{personId}{Vector, the same length as \code{key1}
and \code{key2}, with previously created IDs, and \code{NA}s
for newly added records (where IDs should be created).}
}
\value{
An integer vector the same length as \code{key1} and
\code{key2}.
}
\description{
Function \code{make_person_id} uses data on two keys,
to assign person IDs to records. Two records are assumed
to belong to the same person if the records share at least one
key.
}
\details{
Function \code{update_person_id} adds new IDs to an existing
vector of IDs. These new IDs are consistent with the
existing ones.

Function \code{update_person_id} returns the same vector of IDs
whether the input records are passed in batches or all at once,
provided that the orders of the input records in both instances
are identical. (See example below.)

Note that the keys themselves can be built from more than
one variable, which permits more sophisticated matching rules.

At present \code{make_person_id} and \code{update_person_id}
do not allow \code{key1} and \code{key2} to include missing
values or blanks (i.e. zero-length strings). This is perhaps
too strict, and we may revisit it in the future.
}
\examples{
## function 'make_person_id'
name <- c("M Akhbar", "A Smith", "D Lee", "D Lee", "X Martinez", "M Akhbar")
passport_no <- c("AB3908", "CG0809", "QV2809", "QZ8097", "LE3980", "AB3908")
personId <- make_person_id(key1 = name, key2 = passport_no)
personId

## function 'update_person_id'
personId_extended <- c(personId, NA, NA)
name_extended <- c(name, "D Lee", "A Sen")
passport_no_extended <- c(passport_no, "QV2809", "ZZ2546")
update_person_id(personId = personId_extended,
                 key1 = name_extended,
                 key2 = passport_no_extended)
## (note that the new record for D Lee gets an ID of 3)

## update_person_id returns identical results in both instances
identical(update_person_id(personId = personId_extended,
                           key1 = name_extended,
                           key2 = passport_no_extended),
          update_person_id(personId = as.integer(rep(NA, length(personId_extended))),
                           key1 = name_extended,
                           key2 = passport_no_extended))

}
